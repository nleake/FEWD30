ANGULAR JS
A JS framework which allows you to create reactive Single Page Applications (SPAs)
	Angular builds your page at runtime.
Single Page Application is a single html file with information modified using JS
Rerenders parts of the DOM to update the page.

Angular vs Angular 2 vs Angular 4
Angular 1 = Angular JS: very popular JS framework, released a few years ago
Angular 2 = Angular: a complete re-write of Angular 1 and the future of Angular
Angular 4 = simply an update to Angular 2, Angular 3 was skipped due to version number conflicts

Angular CLI
ng new <app name>
cd <app name>
ng serve

Angular runs on a server, which will run at localhost 4200

We will be creating our projects in the app folder, located in the src folder; default settings should be fine
Assets folder can be used to store image assets, etc. Environments folder can store environment variables

HTML file is what you see, while the typescript file is your business logic
Two way data binding

THE BASICS
What is Typescript?
-------------------
A superset to JS with more features. Includes Types, Classes, and Interfaces.
It has strong typing, allowing you to write more robust code. However, Typescript doesn't run in the browser. Therefore it is converted to JS.
Angular is meant to be used with Typescript. It is an addition to JS, not a replacement.

Spinning up a new project creates an app folder with app.component fils that cover the app-rott component
You can see the app-root component in your index.html file.
index.html is served, containing script files that get run. 


COMPONENTS & DATABINDING
------
Intro
------
Applications are built using a couple of components and are a key feature of Angular.
A header could be it's own component. A main area and a sidebar could also be components.
Allows you to split up your complex application/webpage into reusable parts without having to crunch everything into a single HTML or script file.


-----------------------
Creating a new component
--------------------------
AppComponent is a special component that the whole application is bootstrapped off of (app.module.ts)
Additional components we create will not be added to the index.html file, they will be added to the app.component.html file
When creating a component we will export a new typescript class, we should add a special decorator

Decorators are a Typescript feature that allow you to enhance elements you use in your code.


Angular uses components to build web pages and used modules to bundle different pieces/components of your app into packages

AppModule 
Import the new components to app.module and Register new components in NgModule.declarations

Can create a new component in the Angular CLI using: ng generate component <component name>
	or using the shortcut: ng g c <component name>
	CLI should update the app module imports for you as well, but be sure to check that the import

Remember we can reuse components as often as we want.


--------------------
Styling Components
--------------------
Can define the html code in the typescript code for the component.
Each component must have a templateUrl or a template. template can be used to write template code in the component TypeScript file.
	If you have not much code, you can use an inline template, but once you have > 3 lines of code, it's probably best to use an external templateUrl
**templates have to be present, you can load components without a selector, and don't need styles, but templates are essential!

Can specify different stylesheets or inline styles on the app.
Can use classes or attributes as selectors. (eg .app-server instead of app-server) would appear on elements with the class of app-server

----------------------
Component selector
----------------------
Selector must be a unique value. We can use selector: [selector](for <div selector> in template) or '.selector' (for div class=selector) instead of element.


----------------------
Databinding
----------------------
Databinding is communication between your typescript code (Business Logic) and the template (HTML)

Say if we wanted to Output data to the template,
We can use String Interpolation: ({{ data }})
or Property Binding ([property]="data")

If the user clicks a button or triggers an event,
we can use Event Binding ( (event)="expression" )

Or, we can use a combo of both: Two-Way-Binding ([(ngModel)]="data")
for when we want to output data and react to events at the same time

	String Interpolation - has to return a string. Can't write multi-line expressions.
	Property Binding - you can bind to all the HTML element properties (eg <button [disabled]='allowNewServer'></button>).
		You can bind to properties of directives and components as well.
		If you want to output something like text, use string interpolation, if you want to change some property of an element, use property binding
		Between the quotation marks of property binding you must write a valid TypeScript expression. Don't mix property binding and string interpolation
	Event Binding - () are the signal that we are using event binding. We will specify the name of the event between the parentheses. (click)="onCreateServer()"//put the code you want to execute in the quotation marks
		You can console.log() the element you are interested in to see which properties and events it offers for binding
		Passing and using data with event binding
			eg <input type="text" (input)="onUpdateServerName($event)">
				Can pass $event to capture the event data.
	Two-way binding - Combines property and event binding. eg: [(ngModel)]="serverName" 
		A very simple way of binding in both directions and reacting to events in both directions.
		Please note the the ngModel directive needs to enabled for Two-Way Binding. This is done by adding the FormsModule to the imports[] array in the AppModule
			You then also need to add the import from @angular/forms in teh app.module.ts file: import { FormsModule } from '@angular/forms';
	
			
	






DIRECTIVES
--------------------
What are Directives?
--------------------

Directives are instructions in the DOM! Components are a type of directive in that we are asking Angular to please place this component on the page when we add our component selector.
There are directives without a template as well. <p appTurnGreen>Receives a green background</p>
	@Directive({
		selector:'[appTurnGreen]'
	})
	export class TurnGreenDirective {
		...
	}
	
We will use the directive decorator. 

There are some useful built in directives that come prepackaged with Angular.

--------------------
Built in Directives
--------------------
<p *ngIf="serverCreated; else noServer">Server was created, server name is {{ serverName }}</p>
<ng-template #noServer>
    <p>No server has been created.</p>
</ng-template>

*ngIf is a structural directive (changes the structure of the DOM) Use ngIf to output data to DOM conditionally

=========================================================
Styling elements dynamically with ngStyle
=========================================================
Unlike structural directives, attribute directives dont add or remove elents. They only change elements they are placed on.

We will use property binding on ngStyle. <p [ngStyle]="{backgroundColor: getColor()}"> 
	We added a method getColor() to the TypeScript file to change the bg color to red or green depending on server status.

=========================================================
Styling elements with classes dynamically with ngClass
=========================================================
Similar to ngStyle, we will be using property binding with ngClass and passing it an object with key-value pairs.
The key-value pairs will be the CSS class names and the values are the conditions for if the class is attached or not.

<p 
    [ngStyle]="{backgroundColor: getColor()}"
    [ngClass]="{online: serverStatus === 'online'}">
	
	//.online { color: white} in the TS file under styles
	
=========================================================
Outputting lists with ngFor
=========================================================

=========================================================
Adding bootstrap for styling
=========================================================
npm install --save bootstrap 
go to angular-cli.json file > styles > add "../node_modules/bootstrap/dist/css/bootstrap.min.css",

ERROR MESSAGING
=========================================================
Reading Error messages
=========================================================
Sourcemaps allow the browser to translate the compiled javascript back to TypeScript code for developer debugging in developer tools
- check under webpack subfolders to access TS files directly


VIEW ENCAPSULATION
- CSS doesn't really care what file you reference it from normally, it will apply the rules to the entire document.
HOWEVER, Angular encapsulates the view so that styles applied to a certain component are only applied to that component
Angular applies the same attribute to all elements in a component with unique attribute names
	eg <p _ngcontent-ejo-1> <li _ngcontent-ejo-2> It's almost like a shadow DOM.

You can override encapsulation by adding encapsulation: ViewEncapsulation.None to the Component decorator
	@Component({
		selector
		templateUrl
		styleUrls
		encapsulation: ViewEncapsulation.None //or Native. Emulated is the default.
	})

Doing this will make any styles defined in that component global!

=========================================================
Using local references in templates
=========================================================
A local reference can be placed on any HTML element, adding it with a hashtag and the name of your choice
eg #serverNameInput

Local references can be used anywhere in your template, but only in that template (not in the TypeScript file.)
The local reference will give you all the element and all of it's properties, so if you have for example an input, you could fetch the value.

You can use @ViewChild() and Element Ref to get direct access to elements in our DOM in our template through @ViewChild().


PROJECTING CONTENT INTO COMPONENTS WITH ng-content
Another way to pass data around. Say you have complex HTML code that you want to pass into a component from outside.
<ng-content></ng-content> serves as a hook where it will add any content it finds between the opening and closing tags.



LIFECYCLE HOOKS AND THE COMPONENT LIFECYCLE
=============================================
ngOnInit() {} method is a lifecycle hook. Angular supports a couple of lifecycle hooks.

If a new component is created in Angular, it instantiates it and adds it to the DOM.
Angular goes through a couple of different phases here and allows us to hook into these different phases to execute some code.
We can hook into the phases using some methods.

ngOnChanges - Called after a bound input property changes; may be executed multiple times, at the start on creation and called whenever a bound input property changes > properties decorated with @input
ngOnInit - Called once the component is initialized. Executed after the component has been initialized. 
ngDoCheck - Called during every change detection run.
ngAfterContentInit - Called after content (ng-content) has been projected into view. 
ngAfterContentChecked - Called every time the projected content has been checked.
ngAfterViewInit - Called after the component's view (and child views) has been initialized.
ngAfterViewChecked - Called every time the view (and child views) have been checked.
ngOnDestroy - Called once the component is about to be destroyed (eg ngIf flag goes to false)


LIFECYCLE HOOKS AND TEMPLATE ACCESS NOTE - You cannot check the DOM of your component before ngAfterViewInit has been run.

GETTING ACCESS TO ng-content WITH @ContentChild
====================================================








DIVING DEEPER INTO PROPERTY AND EVENT Binding
You can use property and event binding to pass data on HTML Elements, Directives, and Components

=========================================================
Custom Property Binding
=========================================================
If you want parent components to be able to bind to a child component, add a decorator
Example in the child TS file: @Input() element: {type: string, name: string, content: string};
Example in the parent template file: <app-server-element
	*ngFor="let serverElement of serverElements"
	[element]="serverElement"></app-server-element>
	
You can add an alias to your custom properties by passing an argument to the Input().
eg. Input('srvelement')

=========================================================
Binding to Custom Events
=========================================================
We learned how to pass data from a parent component to a child component
Now lets learn how to pass data from the child back to the parent using custom event bindings

app.component.html: <app-cockpit (serverCreated)="onServerAdded($event)"></app-cockpit>
app.component.ts: You need to create a new method in the AppComponent class
	  onServerAdded(serverData: {serverName: string, serverContent: string}) {
		this.serverElements.push({
		  type: 'server',
		  name: serverData.serverName,
		  content: serverData.serverContent
		});

We will also need to add a new property for serverCreated as an EventEmitter
	Output() serverCreated = new EventEmitter<{{serverName: string, serverContent: string}}>(); //make sure you import EventEmitter in the component from angular core

Event Emitters are objects in the Angular framework that allow you to emit your own events.	

Please remember to add the Output() decorator to the event emitter and import Output from angular core



SERVICES AND DEPENDENCY INJECTION

ROUTING

OBSERVABLES

FORMS

PIPES

HTTP

AUTHENTICATION

OPTIMIZATIONS AND NGMODULES

DEPLOYMENT

ANIMATIONS & TESTING